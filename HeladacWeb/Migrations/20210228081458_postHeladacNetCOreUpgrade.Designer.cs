// <auto-generated />
using System;
using HeladacWeb.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace HeladacWeb.Migrations
{
    [DbContext(typeof(HeladacDbContext))]
    [Migration("20210228081458_postHeladacNetCOreUpgrade")]
    partial class postHeladacNetCOreUpgrade
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.3")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("HeladacWeb.Models.Credential", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("credentialId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("credentialService_DB")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("heladacUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("helmUserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("id");

                    b.HasIndex("credentialId");

                    b.HasIndex("heladacUserId");

                    b.HasIndex("helmUserId");

                    b.ToTable("Credentials");
                });

            modelBuilder.Entity("HeladacWeb.Models.Email", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("bcc_DB")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("cc_DB")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("emailId_DB")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("mailContentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("receiver_DB")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("sender_DB")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("sender_Email_DB")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("sender_Name_DB")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("subJect_DB")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("timeOfCreationMs")
                        .HasColumnType("bigint");

                    b.HasKey("id");

                    b.HasIndex("emailId_DB")
                        .IsUnique()
                        .HasDatabaseName("Email_EmailId")
                        .HasFilter("[emailId_DB] IS NOT NULL");

                    b.HasIndex("mailContentId");

                    b.ToTable("Emails");
                });

            modelBuilder.Entity("HeladacWeb.Models.EmailLogEntry", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("archiveToggleHistory_DB")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("creationTime_DB")
                        .HasColumnType("bigint");

                    b.Property<string>("emailId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("heladacUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("isArchived_DB")
                        .HasColumnType("bit");

                    b.Property<bool>("isDeleted_DB")
                        .HasColumnType("bit");

                    b.Property<bool>("isRead_DB")
                        .HasColumnType("bit");

                    b.Property<string>("readToggleHistory_DB")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("senderEmail_DB")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("timeOfDeletionMs_DB")
                        .HasColumnType("bigint");

                    b.Property<long>("timeOfLastArchiveMs_DB")
                        .HasColumnType("bigint");

                    b.Property<string>("userId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("id")
                        .IsClustered(false);

                    b.HasIndex("emailId");

                    b.HasIndex("heladacUserId");

                    b.HasIndex("userId", "emailId")
                        .IsUnique();

                    b.HasIndex("userId", "id")
                        .IsUnique()
                        .HasDatabaseName("UserId_Email")
                        .IsClustered();

                    b.HasIndex("userId", "creationTime_DB", "id")
                        .IsUnique()
                        .HasDatabaseName("UserId_CreationTime_Email");

                    b.HasIndex("userId", "isRead_DB", "creationTime_DB", "id")
                        .IsUnique()
                        .HasDatabaseName("UserId_IsRead_CreationTime_Email");

                    b.ToTable("EmailLogEntrys");
                });

            modelBuilder.Entity("HeladacWeb.Models.HeladacUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("HeladacWeb.Models.HelmUser", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("address1_DB")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("address2_DB")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("city_DB")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("country_DB")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("creationTimeMs_DB")
                        .HasColumnType("bigint");

                    b.Property<string>("email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("expirationTimeMs_DB")
                        .HasColumnType("bigint");

                    b.Property<string>("firstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("heladacUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.Property<bool>("isDeleted_DB")
                        .HasColumnType("bit");

                    b.Property<string>("lastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("middleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("passwordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("phoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("postal_DB")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("state_DB")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id")
                        .IsClustered(false);

                    b.HasIndex("heladacUserId", "id")
                        .IsUnique()
                        .HasDatabaseName("HelmUser_HeladacUser")
                        .IsClustered();

                    b.ToTable("HelmUsers");
                });

            modelBuilder.Entity("HeladacWeb.Models.MailContent", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("content_DB")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("content_html_DB")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("raw")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("MailContent");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.DeviceFlowCodes", b =>
                {
                    b.Property<string>("UserCode")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("DeviceCode")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("Expiration")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("UserCode");

                    b.HasIndex("DeviceCode")
                        .IsUnique();

                    b.HasIndex("Expiration");

                    b.ToTable("DeviceCodes");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.PersistedGrant", b =>
                {
                    b.Property<string>("Key")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("ConsumedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Key");

                    b.HasIndex("Expiration");

                    b.HasIndex("SubjectId", "ClientId", "Type");

                    b.HasIndex("SubjectId", "SessionId", "Type");

                    b.ToTable("PersistedGrants");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("HeladacWeb.Models.SentMail", b =>
                {
                    b.HasBaseType("HeladacWeb.Models.Email");

                    b.Property<string>("heladacUserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasIndex("heladacUserId");

                    b.ToTable("SentMails");
                });

            modelBuilder.Entity("HeladacWeb.Models.Credential", b =>
                {
                    b.HasOne("HeladacWeb.Models.HelmUser", "credentialUser_DB")
                        .WithMany()
                        .HasForeignKey("credentialId");

                    b.HasOne("HeladacWeb.Models.HelmUser", "heladacUser_DB")
                        .WithMany()
                        .HasForeignKey("heladacUserId");

                    b.HasOne("HeladacWeb.Models.HelmUser", "helmUser_DB")
                        .WithMany()
                        .HasForeignKey("helmUserId");

                    b.Navigation("credentialUser_DB");

                    b.Navigation("heladacUser_DB");

                    b.Navigation("helmUser_DB");
                });

            modelBuilder.Entity("HeladacWeb.Models.Email", b =>
                {
                    b.HasOne("HeladacWeb.Models.MailContent", "mailContent_DB")
                        .WithMany()
                        .HasForeignKey("mailContentId");

                    b.Navigation("mailContent_DB");
                });

            modelBuilder.Entity("HeladacWeb.Models.EmailLogEntry", b =>
                {
                    b.HasOne("HeladacWeb.Models.Email", "email_DB")
                        .WithMany()
                        .HasForeignKey("emailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HeladacWeb.Models.HeladacUser", "heladacUser_DB")
                        .WithMany()
                        .HasForeignKey("heladacUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HeladacWeb.Models.HelmUser", "receiver_DB")
                        .WithMany()
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("email_DB");

                    b.Navigation("heladacUser_DB");

                    b.Navigation("receiver_DB");
                });

            modelBuilder.Entity("HeladacWeb.Models.HelmUser", b =>
                {
                    b.HasOne("HeladacWeb.Models.HeladacUser", "heladacUser_db")
                        .WithMany()
                        .HasForeignKey("heladacUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("heladacUser_db");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("HeladacWeb.Models.HeladacUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("HeladacWeb.Models.HeladacUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HeladacWeb.Models.HeladacUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("HeladacWeb.Models.HeladacUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HeladacWeb.Models.SentMail", b =>
                {
                    b.HasOne("HeladacWeb.Models.HelmUser", "senderUser_DB")
                        .WithMany()
                        .HasForeignKey("heladacUserId");

                    b.HasOne("HeladacWeb.Models.Email", null)
                        .WithOne()
                        .HasForeignKey("HeladacWeb.Models.SentMail", "id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("senderUser_DB");
                });
#pragma warning restore 612, 618
        }
    }
}
